
# Системная установка: говорим как живой оператор.
SYSTEM_PROMPT = (
    "Вы — оператор по работе с дебиторской задолженностью. Говорите естественно и по делу, "
    "без канцеляризмов и без упоминания внутренних процессов или инструментов. "
    "Клиент не должен догадываться, что с ним говорит робот."
)

# Финализация краткого ответа (если используется финализатор)
FINALIZE_PROMPT = (
    "Сформируйте сжатый деловой ответ для клиента на основе предшествующего диалога. "
    "Не раскрывайте внутренние процессы."
)

# Клиентские фразы (наружу)
TEMPLATES = {
    # A — вступление
    "intro": (
        "Добрый день!\nМеня зовут {agent_name}, я из компании Яндекс, звоню по договору с Яндекс.Доставкой.\n"
        "Подскажите, пожалуйста, с кем можно обсудить вопрос по оплате от {company}?"
    ),

    # D — обращение к ЛПР
    "lpr_prompt": (
        "Сумма задолженности по акту от {act_date} составляет {act_amount}. "
        "Скажите, когда планируете оплатить задолженность?"
    ),

    # n5 / n6 — обработка названной даты
    "named_date_over_week": (
        "Понимаю. По договору оплата до 15 числа, сейчас задержка существенная. "
        "Скажите, есть ли возможность оплатить в течение ближайших трёх дней? "
        "Зафиксирую дату оплаты: {target_date}."
    ),
    "named_date_within_week": (
        "Хорошо, спасибо. Зафиксировал: оплата ожидается {target_date}."
    ),

    # n7 — предложение оплатить в течение недели
    "pay_within_week": "Сможете оплатить в течение недели?",

    # n8 — согласие на оплату
    "agree_named_date": (
        "Принято. Ожидаем оплату {target_date}. Благодарю."
    ),

    # n9 — предложение реструктуризации
    "restruct_offer": (
        "Можем разбить сумму на несколько платежей в текущем месяце: "
        "первый — в течение недели, последний — не позднее чем через месяц. Подходит? "
        "Тогда зафиксирую: первый платёж {first_date}, последний — {last_date}."
    ),

    # n10/n11 — предупреждение о претензии
    "pretrial_notice": (
        "Тогда вынужден предупредить: подготовим претензию и направим по e-mail и на юр. адрес. "
        "Просьба оплатить долг {debt_sum} во избежание дополнительных расходов."
    ),

    # n13 — нет ответа
    "first_debtor_letter": (
        "Хорошо, направим письмо с информацией и документами на указанную почту."
    ),

    # n14–n15 — дублирование закрывающих
    "duplicate_closings": (
        "Сегодня отправим закрывающие документы. После получения сможете оплатить? "
        "Подскажите ориентировочную дату."
    ),

    # n16–n18 — клиент утверждает, что оплатил
    "already_paid": (
        "Пока оплаты не видим. Подскажите, когда оплачивали, и направьте, пожалуйста, платёжное поручение на e-mail."
    ),

    # n19–n20 — акт сверки
    "need_recon": (
        "Сегодня направим акт(ы) сверки за весь период. После получения сможете оплатить? "
        "Сориентируете по дате?"
    ),

    # n21–n23 — нужен счёт
    "need_invoice_explain": (
        "Счёт не является первичным документом для оплаты. Могу выслать закрывающие или реквизиты с суммой. "
        "Этого будет достаточно?"
    ),
}

# Описания для классификаторов (без фигурных скобок — иначе Interpolation)
DESC_LPR = (
    "Классифицируй, общаемся ли мы с ЛПР (decision maker). "
    "Верни JSON со свойствами: route (is_lpr или not_lpr) и необязательное notes."
)

DESC_REASON = (
    "Определи причину отсутствия оплаты. Допустимые значения route: "
    "named_date, claims_our_side, client_issues, no_answer. "
    "Верни JSON со свойствами: route и необязательные notes и payment_date."
)

DESC_NAMED_DATE_WINDOW = (
    "Определи, попадает ли названная дата оплаты в 7 дней от сегодня. "
    "Верни JSON со свойствами: route (named_date_within_week или named_date_over_week) "
    "и target_date (YYYY-MM-DD)."
)

DESC_AGREEMENT = (
    "Классифицируй реакцию клиента на предложение оплатить в течение недели. "
    "Верни JSON со свойствами: route (agree или disagree) и, при наличии, target_date (YYYY-MM-DD)."
)

DESC_CLAIMS_SUB = (
    "Для ветки claims_our_side определи подтип. "
    "Верни JSON со свойством route: duplicate_closings, already_paid, "
    "needs_reconciliation или needs_invoice."
)
